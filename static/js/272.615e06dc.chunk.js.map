{"version":3,"file":"static/js/272.615e06dc.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/EditForm/EditForm.styled.js","components/EditForm/EditForm.js","components/ModalContact/ModalContact.styled.js","components/ModalContact/ModalContact.js","components/ContactItem/ContactItem.js","redux/filter/selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Snack/Snack.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 300px;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { Form, FormField } from './ContactForm.styled';\nimport { TextField } from 'formik-mui';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too short, minimal length 2!')\n    .max(50, 'Too long, maximul length 50!')\n    .required('Required')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Not valid! Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Not valid! Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .min(7, 'Too short, minimal length 7!')\n    .required('Required'),\n});\nexport const ContactForm = ({ onClose, showSnake }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        const isAlreadyExist = contacts.find(\n          ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n        );\n        if (isAlreadyExist) {\n          alert(`${values.name} is already in contacts`);\n          return;\n        }\n        dispatch(addContact(values));\n        actions.resetForm();\n        showSnake('Contact successfully added');\n        onClose();\n      }}\n    >\n      <Form>\n        <FormField>\n          <Field\n            component={TextField}\n            variant=\"standard\"\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </FormField>\n        <FormField>\n          <Field\n            component={TextField}\n            variant=\"standard\"\n            label=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </FormField>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          aria-label=\"Add contact\"\n          sx={{ marginTop: '20px' }}\n        >\n          Add contact\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 300px;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\n\nimport * as Yup from 'yup';\nimport { Formik, Field } from 'formik';\nimport { Form, FormField } from './EditForm.styled';\nimport { TextField } from 'formik-mui';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too short, minimal length 2!')\n    .max(50, 'Too long, maximul length 50!')\n    .required('Required')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Not valid! Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Not valid! Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .min(7, 'Too short, minimal length 7!')\n    .required('Required'),\n});\n\nexport const EditForm = ({ onClose, valuesContact, showSnake }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = valuesContact;\n\n  return (\n    <Formik\n      initialValues={{\n        name: name,\n        number: number,\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        dispatch(editContact({ id: id, ...values }));\n        actions.resetForm();\n        showSnake('Contact successfully updated');\n        onClose();\n      }}\n    >\n      <Form>\n        <FormField>\n          <Field\n            component={TextField}\n            variant=\"standard\"\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </FormField>\n        <FormField>\n          <Field\n            component={TextField}\n            variant=\"standard\"\n            label=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </FormField>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          aria-label=\"Update contact\"\n          sx={{ marginTop: '20px' }}\n        >\n          Update contact\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1200;\n`;\n\nexport const Modal = styled.div`\n  background-color: #fff;\n  padding: 20px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Modal, Overlay } from './ModalContact.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalContact = ({ onClose, edit, values, showSnake }) => {\n  useEffect(() => {\n    window.addEventListener('keydown', clickCloseModal);\n    return () => {\n      window.removeEventListener('keydown', clickCloseModal);\n    };\n  });\n  const clickCloseModal = event => {\n    if (event.code === 'Escape' || event.target === event.currentTarget) {\n      return onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={clickCloseModal}>\n      <Modal>\n        {!edit ? (\n          <ContactForm onClose={onClose} showSnake={showSnake} />\n        ) : (\n          <EditForm\n            onClose={onClose}\n            valuesContact={values}\n            showSnake={showSnake}\n          />\n        )}\n      </Modal>\n    </Overlay>,\n    modalRoot\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport { ModalContact } from 'components/ModalContact/ModalContact';\nimport EditNoteIcon from '@mui/icons-material/EditNote';\n\nimport {\n  Avatar,\n  Box,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Tooltip,\n  styled,\n} from '@mui/material';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { theme } from 'components/theme';\n\nconst StiledListItem = styled(ListItem)({\n  padding: '4px 12px',\n  borderBottom: '2px dotted #bdbdbd55',\n  '&:hover': {\n    borderBottom: '2px solid ' + theme.palette.primary.main,\n    backgroundColor: `${theme.palette.primary.main}11`,\n  },\n});\n\nexport const ContactItem = ({ contactItem, showSnake }) => {\n  const [openModal, setOpenModal] = useState(false);\n  const toggleModal = () => setOpenModal(state => !state);\n\n  const dispatch = useDispatch();\n  const { id, name, number } = contactItem;\n\n  return (\n    <>\n      <StiledListItem>\n        <ListItemAvatar>\n          <Avatar>\n            <PersonSearchIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={name} secondary={number} />\n        <Box>\n          <Tooltip title=\"Edit contact\">\n            <IconButton\n              edge=\"end\"\n              aria-label=\"edit\"\n              type=\"button\"\n              onClick={toggleModal}\n              sx={{\n                mr: 1,\n              }}\n            >\n              <EditNoteIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete contact\">\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(id));\n                showSnake('contact successfully deleted');\n              }}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </StiledListItem>\n      {openModal && (\n        <ModalContact\n          onClose={toggleModal}\n          edit={true}\n          values={contactItem}\n          showSnake={showSnake}\n        />\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contactItem: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","export const selectFilter = state => state.filter;\n","import { List } from '@mui/material';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const ContactList = ({ showSnake }) => {\n  const contacts = useSelector(selectContacts);\n  const filterText = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  const getFlteredContacts = () => {\n    const normalizedFilter = filterText.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  if (getFlteredContacts().length === 0 && !isLoading) {\n    return <p> There is no contacts</p>;\n  }\n\n  return (\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      {getFlteredContacts().map(contactItem => (\n        <ContactItem\n          key={contactItem.id}\n          contactItem={contactItem}\n          showSnake={showSnake}\n        />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\nimport { Field as FormikField } from 'formik';\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  padding: 8px;\n  align-items: 'flex-end';\n`;\n\nexport const Field = styled(FormikField)`\n  &svg {\n    margin-right: 100px;\n  }\n`;\n","import { Field } from './Filter.styled';\nimport { Formik } from 'formik';\nimport { TextField } from 'formik-mui';\nimport { FormField } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/slice';\n\nimport SearchIcon from '@mui/icons-material/Search';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n      }}\n    >\n      <FormField>\n        <Field\n          component={TextField}\n          placeholder=\"Find contact by name\"\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={changeFilter}\n          value={filter}\n          autoComplete=\"off\"\n          autoFocus\n          InputProps={{\n            startAdornment: (\n              <SearchIcon\n                position=\"start\"\n                style={{ color: '#74747455', marginRight: '10px' }}\n              />\n            ),\n          }}\n        >\n          <SearchIcon position=\"start\" style={{ color: '#747474' }} />\n        </Field>\n      </FormField>\n    </Formik>\n  );\n};\n","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const Snack = ({ params }) => {\n  const { isOpen, onClose, text } = params;\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={5000} onClose={onClose}>\n      <Alert severity=\"success\">{text}</Alert>\n    </Snackbar>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ModalContact } from 'components/ModalContact/ModalContact';\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { Box, Fab, Tooltip } from '@mui/material';\nimport { Snack } from 'components/Snack/Snack';\nimport AddIcon from '@mui/icons-material/Add';\nimport { theme } from 'components/theme';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const [openModal, setOpenModal] = useState(false);\n  const [isSnakeOpen, setIsSnakeOpen] = useState(false);\n  const [snakeMsg, setSnakeMsg] = useState('');\n\n  const showSnake = text => {\n    setIsSnakeOpen(true);\n    setSnakeMsg(text);\n  };\n\n  const toggleModal = () => setOpenModal(state => !state);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        gap: 2,\n      }}\n    >\n      {' '}\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          gap: 3,\n        }}\n      >\n        <Tooltip title=\"Add contact\">\n          <Fab\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={toggleModal}\n            aria-label=\"add contact\"\n          >\n            <AddIcon\n              sx={{\n                color: theme.palette.primary.contrastText,\n              }}\n            />\n          </Fab>\n        </Tooltip>\n\n        <Filter />\n      </Box>\n      <>{isLoading && !error && <>Loading...</>}</>\n      <ContactList showSnake={showSnake} />\n      {openModal && (\n        <ModalContact onClose={toggleModal} showSnake={showSnake} />\n      )}\n      <Snack\n        params={{\n          isOpen: isSnakeOpen,\n          onClose: () => setIsSnakeOpen(false),\n          text: snakeMsg,\n        }}\n      />\n    </Box>\n  );\n}\n"],"names":["Form","styled","FormikForm","FormField","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactSchema","Yup","shape","name","min","max","required","matches","number","ContactForm","onClose","showSnake","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","find","toLowerCase","alert","addContact","resetForm","component","TextField","variant","label","type","title","Button","sx","marginTop","EditForm","valuesContact","id","editContact","Overlay","Modal","modalRoot","document","querySelector","ModalContact","edit","useEffect","window","addEventListener","clickCloseModal","removeEventListener","event","code","target","currentTarget","createPortal","onClick","StiledListItem","ListItem","padding","borderBottom","theme","backgroundColor","ContactItem","contactItem","useState","openModal","setOpenModal","toggleModal","ListItemAvatar","Avatar","PersonSearch","ListItemText","primary","secondary","Box","Tooltip","IconButton","edge","mr","EditNote","deleteContact","Delete","selectFilter","filter","ContactList","filterText","getFlteredContacts","normalizedFilter","contact","includes","length","List","width","maxWidth","bgcolor","map","Field","FormikField","Filter","placeholder","onChange","e","setFilter","value","autoComplete","autoFocus","InputProps","startAdornment","Search","position","style","color","marginRight","Alert","React","props","ref","elevation","Snack","params","isOpen","text","Snackbar","open","autoHideDuration","severity","Contacts","isSnakeOpen","setIsSnakeOpen","snakeMsg","setSnakeMsg","fetchContacts","display","justifyContent","alignItems","flexDirection","gap","Fab","size","Add"],"sourceRoot":""}